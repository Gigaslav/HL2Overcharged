#include "cbase.h"
#include "weapon_rpgCustom.h"

#include "tier0/memdbgon.h"



BEGIN_DATADESC(CWeaponRPGC1)

END_DATADESC()

IMPLEMENT_SERVERCLASS_ST(CWeaponRPGC1, DT_WeaponRPGC1)
END_SEND_TABLE()

LINK_ENTITY_TO_CLASS(weapon_rpgCustom1, CWeaponRPGC1);
PRECACHE_WEAPON_REGISTER(weapon_rpgCustom1);

acttable_t	CWeaponRPGC1::m_acttable[] =
{
	{ ACT_HL2MP_IDLE, ACT_HL2MP_IDLE_RPG, false },
	{ ACT_HL2MP_RUN, ACT_HL2MP_RUN_RPG, false },
	{ ACT_HL2MP_IDLE_CROUCH, ACT_HL2MP_IDLE_CROUCH_RPG, false },
	{ ACT_HL2MP_WALK_CROUCH, ACT_HL2MP_WALK_CROUCH_RPG, false },
	{ ACT_HL2MP_GESTURE_RANGE_ATTACK, ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG, false },
	{ ACT_HL2MP_GESTURE_RELOAD, ACT_HL2MP_GESTURE_RELOAD_SHOTGUN, false },
	{ ACT_HL2MP_JUMP, ACT_HL2MP_JUMP_RPG, false },
	{ ACT_RANGE_ATTACK1, ACT_RANGE_ATTACK_RPG, true },

	{ ACT_IDLE_RELAXED, ACT_IDLE_RPG_RELAXED, true },
	{ ACT_IDLE_STIMULATED, ACT_IDLE_ANGRY_RPG, true },
	{ ACT_IDLE_AGITATED, ACT_IDLE_ANGRY_RPG, true },

	{ ACT_IDLE, ACT_IDLE_RPG, true },
	{ ACT_IDLE_ANGRY, ACT_IDLE_ANGRY_RPG, true },
	{ ACT_WALK, ACT_WALK_RPG, true },
	{ ACT_WALK_CROUCH, ACT_WALK_CROUCH_RPG, true },
	{ ACT_RUN, ACT_RUN_RPG, true },
	{ ACT_RUN_CROUCH, ACT_RUN_CROUCH_RPG, true },
	{ ACT_COVER_LOW, ACT_COVER_LOW_RPG, true },
	{ ACT_RUN_RELAXED, ACT_RUN_RIFLE_RELAXED, false },	// L1ght 15 : Anims update
	{ ACT_WALK_RELAXED, ACT_WALK_RIFLE_RELAXED, false },
};

IMPLEMENT_ACTTABLE(CWeaponRPGC1);




BEGIN_DATADESC(CWeaponRPGC2)

END_DATADESC()

IMPLEMENT_SERVERCLASS_ST(CWeaponRPGC2, DT_WeaponRPGC2)
END_SEND_TABLE()

LINK_ENTITY_TO_CLASS(weapon_rpgCustom2, CWeaponRPGC2);
PRECACHE_WEAPON_REGISTER(weapon_rpgCustom2);

acttable_t	CWeaponRPGC2::m_acttable[] =
{
	{ ACT_HL2MP_IDLE, ACT_HL2MP_IDLE_RPG, false },
	{ ACT_HL2MP_RUN, ACT_HL2MP_RUN_RPG, false },
	{ ACT_HL2MP_IDLE_CROUCH, ACT_HL2MP_IDLE_CROUCH_RPG, false },
	{ ACT_HL2MP_WALK_CROUCH, ACT_HL2MP_WALK_CROUCH_RPG, false },
	{ ACT_HL2MP_GESTURE_RANGE_ATTACK, ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG, false },
	{ ACT_HL2MP_GESTURE_RELOAD, ACT_HL2MP_GESTURE_RELOAD_SHOTGUN, false },
	{ ACT_HL2MP_JUMP, ACT_HL2MP_JUMP_RPG, false },
	{ ACT_RANGE_ATTACK1, ACT_RANGE_ATTACK_RPG, true },

	{ ACT_IDLE_RELAXED, ACT_IDLE_RPG_RELAXED, true },
	{ ACT_IDLE_STIMULATED, ACT_IDLE_ANGRY_RPG, true },
	{ ACT_IDLE_AGITATED, ACT_IDLE_ANGRY_RPG, true },

	{ ACT_IDLE, ACT_IDLE_RPG, true },
	{ ACT_IDLE_ANGRY, ACT_IDLE_ANGRY_RPG, true },
	{ ACT_WALK, ACT_WALK_RPG, true },
	{ ACT_WALK_CROUCH, ACT_WALK_CROUCH_RPG, true },
	{ ACT_RUN, ACT_RUN_RPG, true },
	{ ACT_RUN_CROUCH, ACT_RUN_CROUCH_RPG, true },
	{ ACT_COVER_LOW, ACT_COVER_LOW_RPG, true },
	{ ACT_RUN_RELAXED, ACT_RUN_RIFLE_RELAXED, false },
	{ ACT_WALK_RELAXED, ACT_WALK_RIFLE_RELAXED, false },
};

IMPLEMENT_ACTTABLE(CWeaponRPGC2);





BEGIN_DATADESC(CWeaponRPGC3)

END_DATADESC()

IMPLEMENT_SERVERCLASS_ST(CWeaponRPGC3, DT_WeaponRPGC3)
END_SEND_TABLE()

LINK_ENTITY_TO_CLASS(weapon_rpgCustom3, CWeaponRPGC3);
PRECACHE_WEAPON_REGISTER(weapon_rpgCustom3);

acttable_t	CWeaponRPGC3::m_acttable[] =
{
	{ ACT_HL2MP_IDLE, ACT_HL2MP_IDLE_RPG, false },
	{ ACT_HL2MP_RUN, ACT_HL2MP_RUN_RPG, false },
	{ ACT_HL2MP_IDLE_CROUCH, ACT_HL2MP_IDLE_CROUCH_RPG, false },
	{ ACT_HL2MP_WALK_CROUCH, ACT_HL2MP_WALK_CROUCH_RPG, false },
	{ ACT_HL2MP_GESTURE_RANGE_ATTACK, ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG, false },
	{ ACT_HL2MP_GESTURE_RELOAD, ACT_HL2MP_GESTURE_RELOAD_SHOTGUN, false },
	{ ACT_HL2MP_JUMP, ACT_HL2MP_JUMP_RPG, false },
	{ ACT_RANGE_ATTACK1, ACT_RANGE_ATTACK_RPG, true },

	{ ACT_IDLE_RELAXED, ACT_IDLE_RPG_RELAXED, true },
	{ ACT_IDLE_STIMULATED, ACT_IDLE_ANGRY_RPG, true },
	{ ACT_IDLE_AGITATED, ACT_IDLE_ANGRY_RPG, true },

	{ ACT_IDLE, ACT_IDLE_RPG, true },
	{ ACT_IDLE_ANGRY, ACT_IDLE_ANGRY_RPG, true },
	{ ACT_WALK, ACT_WALK_RPG, true },
	{ ACT_WALK_CROUCH, ACT_WALK_CROUCH_RPG, true },
	{ ACT_RUN, ACT_RUN_RPG, true },
	{ ACT_RUN_CROUCH, ACT_RUN_CROUCH_RPG, true },
	{ ACT_COVER_LOW, ACT_COVER_LOW_RPG, true },
	{ ACT_RUN_RELAXED, ACT_RUN_RIFLE_RELAXED, false },
	{ ACT_WALK_RELAXED, ACT_WALK_RIFLE_RELAXED, false },
};

IMPLEMENT_ACTTABLE(CWeaponRPGC3);